# -*- coding: utf-8 -*-
"""
Django's settings for project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""
import os
from pathlib import Path

import environ

# Get environ instance
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
ROOT_DIR = Path(__file__).resolve(strict=True).parent.parent
REPOSITORY_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

# Read env file
READ_DOT_ENV_FILE = env.bool("DJANGO_READ_DOT_ENV_FILE", default=True)
ENV_PATH = env.str("DJANGO_ENV_PATH", default=".env")
if READ_DOT_ENV_FILE:
    environ.Env.read_env(os.path.join(REPOSITORY_DIR, ENV_PATH))

# Base variables
# ------------------------------------------------------------------------------
SECRET_KEY = env.str("DJANGO_SECRET_KEY")
DEBUG = env.bool("DJANGO_DEBUG", default=True)
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=["*"])
BACKEND_URL = env.str("DJANGO_BACKEND_URL", default="localhost:8000")
FRONTEND_URL = env.str("DJANGO_FRONTEND_URL", default="localhost:3000")

# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model
AUTH_USER_MODEL = "users.User"

# Application definition
# ------------------------------------------------------------------------------

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]
THIRD_PARTY_APPS = [
    "django_extensions",
    "django_celery_beat",
    "django_cleanup.apps.CleanupConfig",
]
LOCAL_APPS = [
    "src.users",
    "src.authentication",
    "src.core"
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = ROOT_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# if True, run `./manage.py collectstatic --noinput` before
# and the STATICFILES_STORAGE above will be unnecessary
MOUNT_DJANGO_APP = True

# JWT
# ------------------------------------------------------------------------------
ACCESS_TOKEN_EXPIRE_SECONDS = env.str("ACCESS_TOKEN_EXPIRE_SECONDS", default=30 * 60)  # 30 minutes default
REFRESH_TOKEN_EXPIRE_SECONDS = env.str("REFRESH_TOKEN_EXPIRE_SECONDS", default=90 * 24 * 60 * 60)  # 90 days default
JWT_ALGORITHM = env.str("JWT_ALGORITHM", default="HS256")

# Rate Limits
# ------------------------------------------------------------------------------
LIMIT_ACTIVE = env.bool("LIMIT_ACTIVE", default=False)  # True for production, activates rate limits
LIMIT_REGISTER_TIMES = env.str("LIMIT_REGISTER_TIMES", default=5)
LIMIT_REGISTER_SECONDS = env.str("LIMIT_REGISTER_SECONDS", default=60)
LIMIT_CAPTCHA_TIMES = env.str("LIMIT_CAPTCHA_TIMES", default=5)
LIMIT_CAPTCHA_SECONDS = env("LIMIT_CAPTCHA_SECONDS", default=60)
LIMIT_LOGIN_TIMES = env.str("LIMIT_LOGIN_TIMES", default=5)
LIMIT_LOGIN_SECONDS = env.str("LIMIT_LOGIN_SECONDS", default=60)
LIMIT_RESET_PASSWORD_TIMES = env.str("LIMIT_RESET_PASSWORD_TIMES", default=5)
LIMIT_RESET_PASSWORD_SECONDS = env.str("LIMIT_RESET_PASSWORD_SECONDS", default=60)
LIMIT_REQUEST_NEW_PASSWORD_TIMES = env.str("LIMIT_REQUEST_NEW_PASSWORD_TIMES", default=5)
LIMIT_REQUEST_NEW_PASSWORD_SECONDS = env.str("LIMIT_REQUEST_NEW_PASSWORD_SECONDS", default=60)

# Superuser
# ------------------------------------------------------------------------------
SUPERUSER_EMAIL = env.str("SUPERUSER_EMAIL")
SUPERUSER_PASSWORD = env.str("SUPERUSER_PASSWORD")

# Telegram (for logging)
# ------------------------------------------------------------------------------
TELEGRAM_LOGGING_ENABLED = env.bool("TELEGRAM_LOGGING_ENABLED", False)
TELEGRAM_BOT_TOKEN = env.str("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = env.str("TELEGRAM_CHAT_ID")

# CACHE
# ------------------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env("REDIS_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    },
}

# CELERY
# ------------------------------------------------------------------------------
REDIS_URL = env("REDIS_URL")
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CELERY_BROKER_URL = REDIS_URL
CELERY_TASK_ACKS_LATE = False
if USE_TZ:
    # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-timezone
    CELERY_TIMEZONE = TIME_ZONE

# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_backend
CELERY_RESULT_BACKEND = REDIS_URL
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-accept_content
CELERY_ACCEPT_CONTENT = ["json"]
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_serializer
CELERY_TASK_SERIALIZER = "json"
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_serializer
CELERY_RESULT_SERIALIZER = "json"
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-time-limit
# TODO: set to whatever coordinates is adequate in your circumstances
CELERY_TASK_TIME_LIMIT = 5 * 60
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-soft-time-limit
# TODO: set to whatever coordinates is adequate in your circumstances
CELERY_TASK_SOFT_TIME_LIMIT = 60
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#beat-scheduler
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

CELERY_BEAT_SCHEDULE = {
    # "check_birthdays": {
    #     "task": "src.celery_tasks.tasks.check_birthdays",
    #     "schedule": crontab(minute=0, hour=0),  # Execute daily at midnight.
    # },
}
# endregion

# Logging
# ------------------------------------------------------------------------------
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"},
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}
